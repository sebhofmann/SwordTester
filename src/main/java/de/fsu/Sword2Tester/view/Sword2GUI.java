/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.fsu.Sword2Tester.view;

import de.fsu.Sword2Tester.Utils;
import de.fsu.Sword2Tester.model.CollectionViewModel;
import de.fsu.Sword2Tester.model.EntryViewModel;
import de.fsu.Sword2Tester.model.SwordViewModel;
import de.fsu.Sword2Tester.model.WorkspaceViewModel;

import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

import org.apache.abdera.i18n.iri.IRI;
import org.apache.abdera.model.Entry;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.swordapp.client.AuthCredentials;
import org.swordapp.client.ProtocolViolationException;
import org.swordapp.client.SWORDClient;
import org.swordapp.client.SWORDClientException;
import org.swordapp.client.SWORDError;
import org.swordapp.client.ServiceDocument;


/**
 * @author sebastian
 */
public class Sword2GUI extends javax.swing.JFrame {

    private static final Logger LOGGER = LogManager.getLogger();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iriLabel;
    private javax.swing.JButton iriOk;
    private javax.swing.JTextField iriTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel swordInputPanel;
    private javax.swing.JTree swordTree;
    private javax.swing.JScrollPane swordTreeScrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form Sword2GUI
     */
    public Sword2GUI() {
        initComponents();
        swordTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        swordTreeScrollPane = new javax.swing.JScrollPane();
        swordTree = new javax.swing.JTree();
        swordInputPanel = new javax.swing.JPanel();
        iriLabel = new javax.swing.JLabel();
        iriTextField = new javax.swing.JTextField();
        iriOk = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        getContentPane().setLayout(new java.awt.BorderLayout(20, 20));

        swordTreeScrollPane.setPreferredSize(new java.awt.Dimension(300, 384));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Empty");
        swordTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        swordTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                swordTreeValueChanged(evt);
            }
        });
        swordTreeScrollPane.setViewportView(swordTree);

        getContentPane().add(swordTreeScrollPane, java.awt.BorderLayout.LINE_START);

        swordInputPanel.setLayout(new javax.swing.BoxLayout(swordInputPanel, javax.swing.BoxLayout.LINE_AXIS));

        iriLabel.setText("Sword V2 SD IRI:");
        swordInputPanel.add(iriLabel);

        iriTextField.setText("http://localhost:8291/mir/sword2/sd/");
        swordInputPanel.add(iriTextField);

        iriOk.setText("OK");
        iriOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iriOkActionPerformed(evt);
            }
        });
        swordInputPanel.add(iriOk);

        getContentPane().add(swordInputPanel, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.CardLayout());
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void swordTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_swordTreeValueChanged
        LOGGER.info(evt.getPath());
        final Object lastPathComponent = evt.getPath().getLastPathComponent();
        this.jPanel1.removeAll();

        if (lastPathComponent instanceof EntryViewModel) {
            EntryViewModel evm = (EntryViewModel) lastPathComponent;
            DetailedEntryView detailedEntryView1 = new DetailedEntryView();
            detailedEntryView1.setEntry(evm.getEntry());
            this.jPanel1.add(detailedEntryView1);
            this.jPanel1.updateUI();
        }

        if(lastPathComponent instanceof CollectionViewModel){
            CollectionViewModel cvm = (CollectionViewModel) lastPathComponent;
            DetailedCollectionView dcv = new DetailedCollectionView();
            dcv.setCvm(cvm);
            this.jPanel1.add(dcv);
            this.jPanel1.updateUI();


        }

    }//GEN-LAST:event_swordTreeValueChanged

    private void iriOkActionPerformed(java.awt.event.ActionEvent evt) {
        SWORDClient client = new SWORDClient();

        final AuthCredentials auth = Utils.getDefaultAuth();
        try {
            final String sdURI = iriTextField.getText();
            LOGGER.info("Connecting to " + sdURI);
            ServiceDocument sd = client.getServiceDocument(sdURI, auth);

            final SwordViewModel sv = new SwordViewModel(sdURI);
            swordTree.setModel(new DefaultTreeModel(sv));

            sd.getWorkspaces().forEach(ws -> {
                final WorkspaceViewModel workspaceViewModel = new WorkspaceViewModel(ws, sv);
                sv.getWorkspaceViewModels().add(workspaceViewModel);

                ws.getCollections().forEach(col -> {
                    final CollectionViewModel collectionView = new CollectionViewModel(col, workspaceViewModel);
                    workspaceViewModel.getCollectionEntries().add(collectionView);

                    try {
                        Consumer<Entry> entryBuilder = entry -> {
                            LOGGER.info("Proccessing entry : " + entry.getId().toString());

                            List<Entry> entryList = entry.getLinks("edit").stream().map(editLink -> {
                                IRI href = editLink.getHref();
                                try {
                                    return client.getDepositReceipt(href.toString(), auth);
                                } catch (SWORDClientException | SWORDError | ProtocolViolationException e) {
                                    return null;
                                }
                            })
                                    .filter(depositReceipt -> depositReceipt != null)
                                    .map(depositReceipt -> depositReceipt.getEntry())
                                    .collect(Collectors.toList());

                            collectionView.getEntryList().add(new EntryViewModel(entry, collectionView, entryList));

                            swordTree.updateUI();
                        };

                        Utils.getCollectionEntryStream(col, client, auth).forEach(entryBuilder);

                    } catch (SWORDClientException | ProtocolViolationException e) {
                        LOGGER.error("Error while list collections of " + col.getTitle());
                    }

                });

                swordTree.updateUI();
            });
        } catch (Exception e1) {
            LOGGER.error(e1);
            e1.printStackTrace();
        }

    }
}
